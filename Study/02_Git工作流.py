上次课中，我们创建了自己的Git仓库，并向其中添加了一个readme.txt的文件。在继续深入介绍Git的使用方法之前，有必要先来讲一讲Git的工作流。

在你自建的Git本地仓库中，有三个区域：本地目录、暂存区、HEAD。要搞清Git的工作流就要理解这三个区域的作用。



工作目录，就是受Git控制的文件夹，所有被跟踪记录的文件都包括在其中；

暂存区（index或者stage），类似一个缓存区域，临时保存你做的改动；

HEAD，指向最近一次提交后的结果。


而对于项目中的文件来说，分为未跟踪和已跟踪两种状态。

未跟踪的文件的改动不受到Git的版本控制。而已跟踪的文件，即被纳入版本控制的文件，又分为未修改、已修改、已暂存三种状态。



当在工作目录中新加入一个文件时，它处于未跟踪状态。

一个已经被跟踪的文件，如果没有做过新的修改，就是未修改状态。一旦对其做了改动，就变成了已修改状态。

初次克隆某个仓库时，工作目录中所有文件都是已跟踪且未修改的状态。

通过 git add 命令可以将已修改的文件放入暂存区，也可以将未跟踪的文件加入跟踪，并同时放入暂存区。

git commit 命令会将暂存区中的文件提交至HEAD所指向的分支。关于分支的概念，我们后面再说。当被commit之后，暂存区的文件将回到未修改状态。

另外，也可以通过 git rm 将已经跟踪的文件从Git中移除。

再来套用前面的那个例子：作业里要交的试卷和练习题都处于已跟踪状态，那些不用交的就是未跟踪。当你写了某张试卷之后，它就变成了已修改。写完了把它放进书包，它就是已暂存。等你把它提交给老师之后，假设老师瞬间就把它批改完并发还给你，那这时对你来说，它又重新成为了未修改。


git status 命令是用来查看仓库中文件的状态。在命令行中，你的工作目录下运行此命令，可以看到输出文件状态信息。试试执行这条命令，然后修改readme.txt后再试试，看看有什么不同。下节课我们结合它来具体分析状态的变化。
